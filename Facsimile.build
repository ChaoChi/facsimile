<?xml version="1.0" encoding="UTF-8" ?>
<!--
Facsimile - A Discrete-Event Simulation Library
Copyright © 2004-2006, Michael J Allen BSc.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the:

    Free Software Foundation, Inc.
    51 Franklin St, Fifth Floor
    Boston, MA  02110-1301
    USA

The developers welcome all comments, suggestions and offers of assistance.
For further information, please visit the project home page at:

    http://facsimile.sourceforge.net/

Thank you for your interest in the Facsimile project!

IMPORTANT NOTE: All patches (modifications to existing files and/or the
addition of new files) submitted for inclusion as part of the official
Facsimile code base, must comply with the published Facsimile Coding Standards.
If your code fails to comply with the standard, then your patches will be
rejected.  For further information, please visit the coding standards at:

    http://facsimile.sourceforge.net/Documentation/CodingStandards.html
===============================================================================
$Id$

NAnt utility build file for the Facsimile project.

This file defines build targets for the Facsimile project and controls, through
the NAnt utility, how builds are made.

It is suitable for use with the "Cruise Control" automated build & test
framework, through the Subversion version control system.

Build targets defined (refer to the definition of the target for further
details):

assemblyDir
    Creates the .NET assembly output directory if it does not already exist.

docDir
    Creates the documentation directory if it does not already exist.

logDir
    Creates the log directory if it does not already exist.

Common
    Create the "Facsimile.Common" assembly.

CommonTest
    Create the "FacsimileTest.Common" assembly.

TestCommon
    Test the "Facsimile.Common" assembly with the "FacsimileTest"."Common"
    tests.

clean
    Remove all files/directories produced by the build process.

Refer to the NAnt documentation for additional information.
===============================================================================
-->

<project name="Facsimile" default="test" basedir=".">

<!--
Force NAnt to use the .NET/Mono 2.0 framework.
-->

    <property name="nant.settings.currentframework" value="mono-2.0" />

<!--
Facsimile.Common sources directory.  Sources, and resources, located within
this directory will be considered integral members of this assembly.
-->

    <property name="commonSrc.dir" value="./src/Facsimile/Common"
    readonly="true" overwrite="false" />

<!--
FacsimileTest.Common sources directory.  Sources, and resources, located within
this directory will be considered integral members of this assembly.
-->

    <property name="commonTestSrc.dir" value="./src/FacsimileTest/Common"
    readonly="true" overwrite="false" />

<!--
.NET assembly output directory.  This is the directory into which the completed
.NET assemblies will be written.

NOTE: This directory must be created before files can be written to it - it is
not present by default.  The "assemblyDir" target takes care of this.

NOTE: This directory should be ignored by the version control system.
-->

    <property name="assembly.dir" value="./lib" readonly="true"
    overwrite="false" />

<!--
Documentation output directory.  This is the directory into which the completed
documentation, extracted from the library sources, will be written.

NOTE: This directory must be created before files can be written to it - it is
not present by default.  The "docDir" target takes care of this.

NOTE: This directory should be ignored by the version control system.
-->

    <property name="doc.dir" value="./doc" readonly="true" overwrite="false" />

<!--
Log data output directory.  This is the directory into which test data and
other logs will be written.

NOTE: This directory must be created before files can be written to it - it is
not present by default.  The "logDir" target takes care of this.

NOTE: This directory should be ignored by the version control system.
-->

    <property name="log.dir" value="./log" readonly="true" overwrite="false" />

<!--
Major version number.  This is the major version number of the Facsimile
library.  This number should be incremented when one or more major new features
are included in a release of the library.  (Yes, this is subjective and,
therefore, a political decision.)  When this value is incremented, the minor
version and release numbers should be reset to 0 and the build number should be
reset to 10000 * the major version number.

The major version number is never reset.

TODO: Automate the recovery and incrementing of this number by the release
system.
-->

    <property name="versionMajor" value="0" readonly="true" overwrite="false"
    />

<!--
Minor version number.  This is the minor version number of the Facsimile
library.  This number should be incremented when one or more new features, but
no new major features, are included in a release of the library.  (Yes, this is
subjective and, herefore, a political decision.)  When this value is
incremented, the release number should be reset to 0 and the build number
should be eset to 10000 * the major version number + 1000 * the minor version
number.

The minor version number is reset to 0 whenever the major version number is
incremented.

TODO: Automate the recovery and incrementing of this number by the release
system.
-->

    <property name="versionMinor" value="0" readonly="true" overwrite="false"
    />

<!--
Revision version number.  This is the revision version number of the Facsimile
library.  This number should be incremented when one or more bug fixes, but no
new features, are included in a release of the library.

The revision version number is reset to 0 whenever the major or minor version
numbers are incremented.

TODO: Automate the recovery and incrementing of this number by the release
system.
-->

    <property name="versionRevision" value="0" readonly="true"
    overwrite="false" />

<!--
Build version number.  This is the build version number of the Facsimile
library.  This number should be incremented whenever a new build of a release
is made; but note that not all builds are released.

The build version number is reset to 0 whenever the major or minor version
numbers are incremented.

TODO: Automate the recovery and incrementing of this number by the release
system.
-->

    <property name="versionBuild" value="0" readonly="true" overwrite="false"
    />

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"assemblyDir" target.

This target creates the .NET assembly output directory.  It is a pre-requisite
of most of the other targets in this file.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="assemblyDir"
    description="Creates .NET assembly output directory">

<!--
Update the build log.
-->

	<echo level="Info">Creating .NET assembly output directory...</echo>

<!--
If it does not exist already, create the assembly directory.
-->

	<mkdir dir="${assembly.dir}"
	unless="${directory::exists(assembly.dir)}" verbose="true" />

<!--
Update the build log once more.
-->

	<echo level="Info">Done.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"docDir" target.

This target creates the XML documentation output directory.  It is a
pre-requisite of most of the other targets in this file.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="docDir" description="Creates XML documentation directory">

<!--
Update the build log.
-->

	<echo level="Info">Creating XML documentation directory...</echo>

<!--
If it does not exist already, create the documentation directory.
-->

	<mkdir dir="${doc.dir}" unless="${directory::exists(doc.dir)}"
	verbose="true" />

<!--
Update the build log once more.
-->

	<echo level="Info">Done.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"logDir" target.

This target creates the log output directory.  It is a pre-requisite of the
test targets in this file.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="logDir" description="Creates log directory">

<!--
Update the build log.
-->

	<echo level="Info">Creating log directory...</echo>

<!--
If it does not exist already, create the documentation directory.
-->

	<mkdir dir="${log.dir}" unless="${directory::exists(log.dir)}"
	verbose="true" />

<!--
Update the build log once more.
-->

	<echo level="Info">Done.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"Common" target.

Builds the Facsimile.Common assembly.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="Common" description="Builds Facsimile.Common assembly"
    depends="assemblyDir, docDir">

<!--
Update the build log.
-->

	<echo level="Info">Building the Facsimile.Common assembly...</echo>

<!--
Build the assembly.  This will include all C# source files (identified as those
files that have a ".cs" file extension) and all resource files (identified as
those files that have a ".resx" file extension) in the Facsimile.Common source
directory.

The highest warning level should be used and all warnings should be treated as
errors - this forces the library to build cleanly.
-->

	<csc target="library" output="${assembly.dir}/Facsimile.Common.dll"
	doc="${doc.dir}/Facsimile.Common.xml" warninglevel="4"
	warnaserror="true">
	    <sources>
		<include name="${commonSrc.dir}/*.cs" />
	    </sources>
	    <resources dynamicprefix="true" prefix="Facsimile.Common" >
		<include name="${commonSrc.dir}/*.resx"/>
	    </resources>
	    <references>
	    </references>
	</csc>

<!--
Update the build log once more.
-->

	<echo level="Info">Done.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"CommonTest" target.

Builds the FacsimileTest.Common assembly.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="CommonTest"
    description="Builds FacsimileTest.Common assembly"
    depends="assemblyDir, docDir, Common">

<!--
Update the build log.
-->

	<echo level="Info">Building the FacsimileTest.Common assembly...</echo>

<!--
Build the assembly.  This will include all C# source files (identified as those
files that have a ".cs" file extension) and all resource files (identified as
those files that have a ".resx" file extension) in the FacsimileTest.Common
source directory.

The highest warning level should be used and all warnings should be treated as
errors - this forces the library to build cleanly.

TODO: Re-examine the use of explicit nunit library paths.
-->

	<csc target="library" output="${assembly.dir}/FacsimileTest.Common.dll"
	doc="${doc.dir}/FacsimileTest.Common.xml" warninglevel="4"
	warnaserror="true">
	    <sources>
		<include name="${commonTestSrc.dir}/*.cs" />
	    </sources>
	    <resources dynamicprefix="true" prefix="Facsimile.Common" >
		<include name="${commonTestSrc.dir}/*.resx"/>
	    </resources>
	    <references>
		<include name="/usr/lib/nunit/nunit.core.dll" />
		<include name="/usr/lib/nunit/nunit.framework.dll" />
		<include name="${assembly.dir}/Facsimile.Common.dll" />
	    </references>
	</csc>

<!--
Update the build log once more.
-->

	<echo level="Info">Done.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"TestCommon" target.

Tests the Facsimile.Common assembly.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="TestCommon" description="Tests Facsimile.Common assembly"
    depends="logDir, Common, CommonTest">

<!--
Update the build log.
-->

	<echo level="Info">Testing the Facsimile.Common assembly...</echo>

<!--
Run the NUnit2 framework test suite on the Facsimile.Common assembly.
-->

	<nunit2>
	    <formatter type="Xml" outputdir="${log.dir}" usefile="true" />
	    <test assemblyname="${assembly.dir}/FacsimileTest.Common.dll" />
	</nunit2>

<!--
Update the build log once more.
-->

	<echo level="Info">Done.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"clean" target.

Clean the source directory tree by removing all final, intermediate, log and
debug files and directories created by the build process.

Ideally, files and directories should be deleted in the reverse order to that
in which they where created.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="clean" description="Clean source directory tree">

<!--
Update the build log.
-->

	<echo level="Info">Cleaning source tree...</echo>

<!--
Delete the log directory, if it exists.
-->

	<delete dir="${log.dir}" if="${directory::exists(log.dir)}"
	verbose="true" />

<!--
Delete the documentation directory, if it exists.
-->

	<delete dir="${doc.dir}" if="${directory::exists(doc.dir)}"
	verbose="true" />

<!--
Delete the assembly directory, if it exists.
-->

	<delete dir="${assembly.dir}" if="${directory::exists(assembly.dir)}"
	verbose="true" />

<!--
Update the build log once more.
-->

	<echo level="Info">Done.</echo>
    </target>
</project>
