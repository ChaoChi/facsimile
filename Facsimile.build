<?xml version="1.0" encoding="utf-8" ?>
<!--
Facsimile - A Discrete-Event Simulation Library
Copyright © 2004-2007, Michael J Allen.

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

The developers welcome all comments, suggestions and offers of assistance.
For further information, please visit the project home page at:

    http://www.facsim.org/

Thank you for your interest in the Facsimile project!

IMPORTANT NOTE: All patches (modifications to existing files and/or the
addition of new files) submitted for inclusion as part of the official
Facsimile code base, must comply with the published Facsimile Coding Standards.
If your code fails to comply with the standard, then your patches will be
rejected.  For further information, please visit the coding standards at:

    http://www.facsim.org/Documentation/CodingStandards/
===============================================================================
$Id$

NAnt XML build file for Facsimile, its integral packages and test suite.

NAnt is the official, preferred tool for building and testing Facsimile, and
this is the standard build file; a set of files for building Facsimile with
MonoDevelop is also provided with the sources, but NAnt takes priority.

Note that both debug and release versions, of all assemblies - including test
suite assemblies - will be created simultaneously.
===============================================================================
-->

<project name="Facsimile" default="All" basedir=".">
    <description>
        Build file for the Facsimile discrete-event simulation library.
    </description>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Platform-specific properties.

This section defines characteristics that are dependent on the platform upon
which the sources are being built.

Although .NET/Mono applications are executed by a virtual machine, and
therefore the same executable should run on any platform for which there is a
virtual machine, in practice there are notable differences.  Primarily,
Microsoft's compiler tools are only available on the Windows platform, whilst
Novell's Mono tools are available on some of the others.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
For the log, note which operating system the sources are being built upon.
-->

    <echo level="Info">Running on ${operating-system::to-string
    (environment::get-operating-system ())}</echo>

<!--
Force NAnt to use the .NET 2.0 framework SDK (software development kit) on
Windows platforms, and the Mono 2.0 framework SDK on all other platforms.

Note: We have to do this as two tests, because there is not an <else> condition
available.

Note: I've yet to resolve how to support the Apple Mac.  It appears that there
may be a Microsoft .NET framework available for this platform, so I'm unsure
how to handle it right now.  Watch this space...
-->

    <if test="${platform::is-win32 ()}">
        <if test="${not framework::sdk-exists ('net-2.0')}">
            <fail>
.NET 2.0 framework SDK missing.

NAnt reports that it is unable to find the .NET 2.0 framework software
development kit (SDK) on your machine.  If you do not have .NET 2.0 installed,
you can obtain it from:

    http://www.microsoft.com/
            </fail>
        </if>
        <property name="nant.settings.currentframework" value="net-2.0" />
        <!-- <property name="facsimile.csc.nowarn" value="" readonly="true"
        overwrite="false" /> -->
    </if>
    <if test="${not platform::is-win32 ()}">
        <if test="${not framework::sdk-exists ('mono-2.0')}">
            <fail>
Mono 2.0 framework SDK missing.

NAnt reports that it is unable to find the Mono 2.0 framework software
development kit (SDK) on your machine.  If you do not have Mono 2.0 installed,
you can (most likely) obtain binary packages from your operating system
distribution's package repository or from the Mono site at:

    http://www.mono-project.com/
            </fail>
        </if>
        <property name="nant.settings.currentframework" value="mono-2.0" />
        <property name="facsimile.csc.nowarn" value="1580,1584" readonly="true"
        overwrite="false" />
    </if>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Machine-specific (global) properties.

Note: In the future, I'd like to see this script auto-configure itself.
Nothing is going to put off potential developers than a complex configuration
régime.

This file relies upon the following global properties, that are defined in the
"NAnt.exe.config" file (located in "/usr/lib/NAnt" by default on Ubuntu Linux,
in "c:\Program Files\nant\bin" on Windows, etc.).  These properties must be
correctly initialised.

nunit.assy.dir
    The directory containing the NUnit .NET assemblies.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
Check for the presence of required global symbols and provide assistance to the
user if any are missing.
-->

    <if test="${not property::exists ('nunit.assy.dir')}">
        <fail>
Global property 'nunit.assy.dir' is not defined.

The property 'nunit.assy.dir' should be defined in your machine's
'NAnt.exe.config' file, and should contain the path to the NUnit assemblies
that are required by this build process for assembly testing.  If you do not
have NUnit, you can obtain a copy for your platform from:

    http://www.nunit.org/
        </fail>
    </if>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Local set-up and properties.

This section defines a number of local properties for use solely within this
file.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

<!--
Output directory for completed assemblies - both debug and release versions.

Note: This directory - and all of its contents - will be removed when the
"Clean" target is specified.
-->

    <property name="facsimile.lib" value="./lib" readonly="true"
    overwrite="false" />

<!--
Output directory for completed documentation.

Note: This directory - and all of its contents - will be removed when the
"Clean" arget is specified.
-->

    <property name="facsimile.doc" value="./doc" readonly="true"
    overwrite="false" />

<!--
Output directory for NUnit test logs.

Note: This directory - and all of its contents - will be removed when the
"Clean" arget is specified.
-->

    <property name="facsimile.log" value="./log" readonly="true"
    overwrite="false" />

<!--
Source directory for the Facsimile.Common assembly.
-->

    <property name="facsimile.common.src" value="./Facsimile.Common"
    readonly="true" overwrite="false" />

<!--
Some key files within the Facsimile.Common source directory.
-->

    <property name="facsimile.common.resource.txt"
    value="${facsimile.common.src}/Resource.txt" readonly="true"
    overwrite="false" />
    <property name="facsimile.common.resource.resources"
    value="${facsimile.common.src}/Resource.resources" readonly="true"
    overwrite="false" />

<!--
Debug and release versions of Facsimile.Common library.
-->

    <property name="facsimile.common.debug.dll"
    value="${facsimile.lib}/Facsimile.Common.Debug.dll" readonly="true"
    overwrite="false" />
    <property name="facsimile.common.dll"
    value="${facsimile.lib}/Facsimile.Common.dll" readonly="true"
    overwrite="false" />

<!--
Debug and release versions of the Facsimile.Common documentation.
-->

    <property name="facsimile.common.debug.xml"
    value="${facsimile.doc}/Facsimile.Common.Debug.xml" readonly="true"
    overwrite="false" />
    <property name="facsimile.common.xml"
    value="${facsimile.doc}/Facsimile.Common.xml" readonly="true"
    overwrite="false" />

<!--
Source directory for the Facsimile.CommonTest test suite assembly.
-->

    <property name="facsimile.commonTest.src" value="./Facsimile.CommonTest"
    readonly="true" overwrite="false" />

<!--
Debug and release versions of Facsimile.CommonTest library.
-->

    <property name="facsimile.commonTest.debug.dll"
    value="${facsimile.lib}/Facsimile.CommonTest.Debug.dll" readonly="true"
    overwrite="false" />
    <property name="facsimile.commonTest.dll"
    value="${facsimile.lib}/Facsimile.CommonTest.dll" readonly="true"
    overwrite="false" />

<!--
Debug and release versions of the Facsimile.CommonTest documentation.
-->

    <property name="facsimile.commonTest.debug.xml"
    value="${facsimile.doc}/Facsimile.CommonTest.Debug.xml" readonly="true"
    overwrite="false" />
    <property name="facsimile.commonTest.xml"
    value="${facsimile.doc}/Facsimile.CommonTest.xml" readonly="true"
    overwrite="false" />

<!--
By default, this build script will execute all tests.  However, overwriting
certain of these properties with a true value allows the corresponding
category of tests to be excluded.

The list of official test categories are:
<none>	Test does not belong to any category.  This is the default for most
	tests.
Long	Tests belonging to this category take a long time to execute.  Disable
	this category of test to speed-up testing and debugging of newer code.

However, ALL TESTS MUST BE INCLUDED AND PASSED BEFORE COMMITTING SOURCES!
-->

    <property name="facsimile.nunit.excludeLong" value="false" readonly="true"
    overwrite="false" />

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Clean target.

This target removes all files created by the build process, including
assemblies, resources, documentation and test logs.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="Clean"
    description="Remove all NAnt-generated elements from source tree.">

<!--
Log what we're doing to the output.
-->

        <echo level="Info" message="Cleaning source tree..." />

<!--
Delete all output directories, if they exist.
-->

        <delete dir="${facsimile.lib}" verbose="true" />
        <delete dir="${facsimile.doc}" verbose="true" />
        <delete dir="${facsimile.log}" verbose="true" />

<!--
Now delete all resource files in the source directories.  Be careful to delete
only the files that we actually create.
-->

        <delete file="${facsimile.common.resource.resources}" verbose="true" />

<!--
Delete any other files that are generated output - say source files generated
by tools, etc.
-->

        <!-- Add delete statements here -->

<!--
We're done.
-->

        <echo level="Info" message="Done." />
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CreateLibDir target.

This target creates the output directory for all generated assemblies; it is a
pre-requisite for assembly generation targets.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="CreateLibDir" description="Create ./lib directory">

<!--
Log what we're doing to the output.
-->

        <echo level="Info" message="Checking for ./lib output directory..." />

<!--
Create the directory if neeeded.
-->

        <mkdir dir="${facsimile.lib}" verbose="true" />

<!--
We're done.
-->

        <echo level="Info" message="Done." />
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CreateDocDir target.

This target creates the output directory for all generated documentation; it is
a pre-requisite for documentation generation targets.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="CreateDocDir" description="Create ./doc directory">

<!--
Log what we're doing to the output.
-->

        <echo level="Info" message="Checking for ./doc output directory..." />

<!--
Create the directory if neeeded.
-->

        <mkdir dir="${facsimile.doc}" verbose="true" />

<!--
We're done.
-->

        <echo level="Info" message="Done." />
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CreateLogDir target.

This target creates the output directory for all generated logs; it is a
pre-requisite for test suite execution targets.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="CreateLogDir" description="Create ./log directory">

<!--
Log what we're doing to the output.
-->

        <echo level="Info" message="Checking for ./log output directory..." />

<!--
Create the directory if neeeded.
-->

        <mkdir dir="${facsimile.log}" verbose="true" />

<!--
We're done.
-->

        <echo level="Info" message="Done." />
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Common target.

This target builds the Facsimile.Common (Release and Debug build) assemblies
and documentation.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="Common" description="Create Facsimile.Common assemblies"
    depends="CreateLibDir, CreateDocDir">

<!--
Log what we're doing to the output.
-->

        <echo level="Info" message="Create Facsimile.Common assemblies..." />

<!--
Build the resource output files from the sources.
-->

        <resgen target="resources" verbose="true"
        todir="${facsimile.common.src}">
            <resources>
                <include name="${facsimile.common.resource.txt}" />
            </resources>
        </resgen>

<!--
Compile the Facsimile.Common sources with debug information, but without
optimized output; this is the debug version.
-->

        <csc output="${facsimile.common.debug.dll}" target="library"
        debug="Enable" optimize="false" warninglevel="4" warnaserror="true"
        doc="${facsimile.common.debug.xml}">
            <nowarn>
                <if test="${not property::exists ('facsimile.csc.nowarn')}">
                    <warning number="${facsimile.csc.nowarn}" />
                </if>
            </nowarn>
            <references>
            </references>
            <resources>
                <include name="${facsimile.common.resource.resources}" />
            </resources>
            <sources>
                <include name="${facsimile.common.src}/*.cs" />
            </sources>
        </csc>

<!--
Compile the Facsimile.Common sources without debug information, but with
optimized output; this is the release version.
-->

        <csc output="${facsimile.common.dll}" target="library" debug="None"
        optimize="true" warninglevel="4" warnaserror="true"
        doc="${facsimile.common.xml}">
            <nowarn>
                <if test="${not property::exists ('facsimile.csc.nowarn')}">
                    <warning number="${facsimile.csc.nowarn}" />
                </if>
            </nowarn>
            <references>
            </references>
            <resources>
                <include name="${facsimile.common.resource.resources}" />
            </resources>
            <sources>
                <include name="${facsimile.common.src}/*.cs" />
            </sources>
        </csc>

<!--
We're done.
-->

        <echo level="Info" message="Done." />
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CommonTest target.

This target builds the Facsimile.CommonTest (Release and Debug build)
assemblies and documentation.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="CommonTest"
    description="Create Facsimile.CommonTest assemblies"
    depends="CreateLibDir, CreateDocDir, Common">

<!--
Log what we're doing to the output.
-->

        <echo level="Info" message="Create Facsimile.CommonTest assemblies..."
        />

<!--
Build the resource output files from the sources.
-->

        <!-- No resources in test suite... -->

<!--
Compile the Facsimile.CommonTest sources with debug information, but without
optimized output; this is the debug version.
-->

        <csc output="${facsimile.commonTest.debug.dll}" target="library"
        debug="Enable" optimize="false" warninglevel="4" warnaserror="true"
        doc="${facsimile.commonTest.debug.xml}">
            <nowarn>
                <if test="${not property::exists ('facsimile.csc.nowarn')}">
                    <warning number="${facsimile.csc.nowarn}" />
                </if>
            </nowarn>
            <references>
                <include name="${facsimile.common.debug.dll}" />
                <include name="${nunit.assy.dir}/nunit.framework.dll" />
            </references>
            <resources dynamicprefix="true" prefix="Facsimile.CommonTest">
            </resources>
            <sources>
                <include name="${facsimile.commonTest.src}/*.cs" />
            </sources>
        </csc>

<!--
Compile the Facsimile.Common sources without debug information, but with
optimized output; this is the release version.
-->

        <csc output="${facsimile.commonTest.dll}" target="library" debug="None"
        optimize="true" warninglevel="4" warnaserror="true"
        doc="${facsimile.commonTest.xml}">
            <nowarn>
                <if test="${not property::exists ('facsimile.csc.nowarn')}">
                    <warning number="${facsimile.csc.nowarn}" />
                </if>
            </nowarn>
            <references>
                <include name="${facsimile.common.dll}" />
                <include name="${nunit.assy.dir}/nunit.framework.dll" />
            </references>
            <resources dynamicprefix="true" prefix="Facsimile.CommonTest">
            </resources>
            <sources>
                <include name="${facsimile.commonTest.src}/*.cs" />
            </sources>
        </csc>

<!--
We're done.
-->

        <echo level="Info" message="Done." />
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TestCommon target.

This target runs the Facsimile.CommonTest debug assembly as a test suite for
the Facsimile.Common assemblies.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="TestCommon"
    description="Test Facsimile.Common debug assembly"
    depends="CreateLogDir, Common, CommonTest">

<!--
Log what we're doing to the output.
-->

        <echo level="Info"
        message="Testing Facsimile.CommonTest debug assembly..." />

<!--
OK.  Execute the NUnit tests contained within the debug version of the
Facsimile.CommonTest assembly.  This is more likely to throw up errors and more
likely to provide information to assist with debugging; hence the debug tests
are performed first.  (The release tests are only made prior to a release being
made.)
-->

        <nunit2 verbose="true">
            <formatter type="Xml" outputdir="${facsimile.log}" usefile="true"
            />
	    <test assemblyname="${facsimile.commonTest.debug.dll}">
		<categories>
		    <exclude if="${facsimile.nunit.excludeLong}" name="Long" />
		</categories>
	    </test>
        </nunit2> -->

<!--
We're done.
-->

        <echo level="Info" message="Done." />
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
All target.

This target builds integral packages and runs all test suites.  If this target
completes successfully, then we have a release-quality build.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="All" description="Full build &amp; test"
    depends="TestCommon">

<!--
If everything has finished successfully, then increment the build number.  This
is stored within the build.number file.
-->

        <!-- <buildnumber /> -->
    </target>
</project>

