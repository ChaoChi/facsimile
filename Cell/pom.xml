<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
http://maven.apache.org/xsd/maven-4.0.0.xsd">
<!--
Copyright Â© 2012, Michael J Allen.
===============================================================================
$Id$

Top-level Maven Project Object Model (POM) file for cell viewing.

This file should be edited manually as text, rather than using a structured
editor such as Eclipse's "Maven POM Editor" or the "XML Editor".
===============================================================================
-->

<!--
===============================================================================
POM co-ordinate information.
===============================================================================
-->

  <modelVersion>4.0.0</modelVersion>
  <groupId>org.facsim.anim</groupId>
  <artifactId>Cell</artifactId>
  <version>0.0.1-SNAPSHOT</version>

<!--
===============================================================================
POM information.
===============================================================================
-->

  <name>Facsimile animation library</name>
  <description>
    Temporary branch for developing Java3D scenes from AutoMod cell files.
  </description>

<!--
===============================================================================
Organization.

This project is the personal property of Michael J Allen.  At some point in the
future, this may be changed to a consortium of developers - but no-one else has
contributed to the project just yet, so this will suffice for now.
===============================================================================
-->

  <organization>
    <name>Michael J Allen</name>
    <url>https://hindsight-consulting.com/Blog/MikeAllen</url>
  </organization>

<!--
===============================================================================
License.

This software is distributed under the GNU Lesser General Public License,
version 3 (GPLv3).
===============================================================================
-->

  <licenses>
    <license>
      <name>GNU Lesser General Public License version 3 (LGPLv3)</name>
      <url>http://www.gnu.org/licenses/lgpl-3.0-standalone.html</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

<!--
===============================================================================
Developers.

If you are actively involved in this project, you should add your name, role,
e-mail address and (optionally) organization to this list, alphabetically, by
surname.  When your active participation in the project ceases, your
development information should be transferred to the "Contributors" section.
===============================================================================
-->

  <developers>

<!--
Allen, Mike.
-->

    <developer>
      <id>mallen</id>
      <name>Michael J Allen</name>
      <email>mike.allen@worldwidefamily.net</email>
      <url>https://hindsight-consulting.com/Blog/MikeAllen</url>
      <organization>Hindsight Consulting, Inc.</organization>
      <organizationUrl>http://hindsight-consulting.com/</organizationUrl>
      <roles>
        <role>Project Lead</role>
        <role>Architect</role>
        <role>Developer</role>
      </roles>
      <timezone>US/Eastern</timezone>
    </developer>
  </developers>

<!--
===============================================================================
Contributors.

If you have made contributions to this project, but are not actively involved,
you should add your name, role, e-mail address and (optionally) organization to
this list, alphabetically, by surname.
===============================================================================
-->

  <contributors>
  </contributors>

<!--
===============================================================================
Mailing lists.
===============================================================================
-->

  <mailingLists>
  </mailingLists>

<!--
===============================================================================
Pre-requisites.
===============================================================================
-->

  <prerequisites>
    <maven>3.0</maven>
  </prerequisites>

<!--
===============================================================================
Source Code Management.
===============================================================================
-->

<!--
Do NOT use Maven properties in these fields, as they will get trashed by the
maven-release-plugin during a release.
-->

  <scm>
  </scm>

<!--
===============================================================================
Issue Management System.
===============================================================================
-->

  <issueManagement>
  </issueManagement>

<!--
===============================================================================
Continuous Integration (CI) System.

This project utilizes the Jenkins CI system, which is (currently) hosted on a
private server that is inaccessible from the Internet.
===============================================================================
-->

  <ciManagement>
    <system>Jenkins</system>
    <url>http://sol.hindsight.dyndns.biz:8080/</url>
    <notifiers>
      <notifier>
        <type>mail</type>
        <sendOnError>true</sendOnError>
        <sendOnFailure>true</sendOnFailure>
        <sendOnSuccess>false</sendOnSuccess>
        <sendOnWarning>true</sendOnWarning>
      </notifier>
    </notifiers>
  </ciManagement>

<!--
===============================================================================
Distribution management.
===============================================================================
-->

  <distributionManagement>
  </distributionManagement>

<!--
===============================================================================
Properties.

Many of these properties relate to versions of other tools and/or plug-ins.  It
should be obvious, but in case it isn't, use these properties in place of
hard-coded version numbers in the remainder of this file.

This project will endeavor to always utilize the most recent, stable point
release available, but not necessarily the most recent, bleeding-edge release.
===============================================================================
-->

  <properties>

<!--
Format for the build timestamp.

This has been formatted to work with the org.joda.time.DateTime.parse (String)
function, which will be used to process build timestamp information read from
the manifest.
-->

    <maven.build.timestamp.format>
      yyyy-MM-dd'T'HH:mm:ss.SSSZ
    </maven.build.timestamp.format>

<!--
Build timestamp.

This value is written into the manifest as the release date.  Obviously, this
is an official release date only during official, signed release builds.

Note: A bug seems to prevent ${maven.build.timestamp} from being used directly
in this file (in some versions of Maven, at least), but, as a workaround, it's
value can be assigned to another property which is used in its place.
-->

    <contacts.timestamp>${maven.build.timestamp}</contacts.timestamp>

<!--
Ensure that we use UTF-8 encoding for all source and output files.

If this is not specified, we get a warning that builds are platform-dependent.
-->

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

<!--
Versions of Scala libraries, frameworks and Maven plug-ins.

These tools are typically highly sensitive (due to binary compatibility issues)
to the version of the Scala compiler/library in use.  If the Scala version is
changed, then, typically, the versions of all other Scala libraries and tools
will need to be revised to remain compatible - including any Scala plug-ins.
-->

    <scala.version>2.9.2</scala.version>
    <scalatest.version>1.8</scalatest.version>
    <scalatest.scala.version>${scala.version}</scalatest.scala.version>
    <maven-scala-plugin.version>2.15.2</maven-scala-plugin.version>
    <scalatest-maven-plugin.version>1.0-M2</scalatest-maven-plugin.version>
    <scalastyle-maven-plugin.version>0.1.0</scalastyle-maven-plugin.version>

<!--
Versions of miscellaneous Java library and framework dependencies.

Scala is not sensitive to the versions of Java libraries and frameworks.  The
versions of these dependencies can be changed without too much concern about
the version of Scala employed.
-->

<!--
Versions of miscellaneous (non-Scala-related) Maven plug-ins.

Scala is not sensitive to the versions of these Maven plug-ins.  The versions
of these plug-ins can be changed without too much concern about the version of
Scala employed.

The versions of these plug-ins should be raised periodically to the most recent
available.

The maven-release-plugin has a managed version of 2.1 from our parent project.
Hence this property is commented out throughout this file.
-->

    <!-- maven-changes-plugin.version>2.7.1</maven-changes-plugin.version -->
    <!-- maven-cobertura-plugin.version>
      2.5.1
    </maven-cobertura-plugin.version -->
    <maven-dependency-plugin.version>2.4</maven-dependency-plugin.version>
    <maven-findbugs-plugin.version>2.5.2</maven-findbugs-plugin.version>
    <maven-gpg-plugin.version>1.4</maven-gpg-plugin.version>
    <maven-help-plugin.version>2.1.1</maven-help-plugin.version>
    <maven-jar-plugin.version>2.4</maven-jar-plugin.version>
    <maven-project-info-plugin.version>
      2.5.1
    </maven-project-info-plugin.version>
    <!-- maven-release-plugin.version>2.3.2</maven-release-plugin.version -->
    <maven-resources-plugin.version>2.5</maven-resources-plugin.version>
    <maven-site-plugin.version>3.1</maven-site-plugin.version>
    <maven-surefire-plugin.version>2.9</maven-surefire-plugin.version>
    <wagon-ssh.version>2.2</wagon-ssh.version>
  </properties>

<!--
===============================================================================
Dependencies.

This section identifies all dependencies referenced by this library.
===============================================================================
-->

  <dependencies>

<!--
Scala standard library.
-->

    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.version}</version>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-swing</artifactId>
      <version>${scala.version}</version>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>java3d</groupId>
      <artifactId>vecmath</artifactId>
      <version>1.3.1</version>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>java3d</groupId>
      <artifactId>j3d-core</artifactId>
      <version>1.3.1</version>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>java3d</groupId>
      <artifactId>j3d-core-utils</artifactId>
      <version>1.3.1</version>
      <scope>compile</scope>
    </dependency>

<!--
ScalaTest unit-testing framework.
-->

    <dependency>
      <groupId>org.scalatest</groupId>
      <artifactId>scalatest_${scalatest.scala.version}</artifactId>
      <version>${scalatest.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

<!--
===============================================================================
Repositories.

The Sonatype OSS Nexus host strongly discourages the use of third-party
repositories.  Avoid entering information here at all costs.
===============================================================================
-->

  <!-- repositories>
  </repositories -->

<!--
===============================================================================
Maven plug-in repositories.

The Sonatype OSS Nexus host strongly discourages the use of third-party
plugin repositories.  Avoid entering information here at all costs.
===============================================================================
-->

  <!-- pluginRepositories>
  </pluginRepositories -->

<!--
===============================================================================
Build configuration.
===============================================================================
-->

  <build>

<!--
Since this is a Scala project, the primary product-related sources should be in
src/main/scala, and test-related code should be placed in src/test/scala.
-->

    <sourceDirectory>src/main/scala</sourceDirectory>
    <testSourceDirectory>src/test/scala</testSourceDirectory>

<!--
Output and test output directories depend upon the active profile - see the
profiles section for further information.
-->

    <outputDirectory>${target.path}/classes</outputDirectory>
    <testOutputDirectory>${target.path}/test-classes</testOutputDirectory>

<!--
Build-related plug-ins.
-->

    <plugins>

<!--
Provide information on the current build.
-->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-help-plugin</artifactId>
        <version>${maven-help-plugin.version}</version>
      </plugin>

<!--
Scala plug-in.

These are the common settings for all build profiles.  See the profile section
for further information.
-->

      <plugin>
        <groupId>org.scala-tools</groupId>
        <artifactId>maven-scala-plugin</artifactId>
        <version>${maven-scala-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>testCompile</goal>
              <goal>doc</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

<!--
Findbugs static code checking.

Findbugs was designed for Java source, but operates on Java bytecode, so it
also works for Scala programs too.  Unfortunately, use with Scala is still
fairly primitive, resulting in a lot of false positives.
-->

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
        <version>${maven-findbugs-plugin.version}</version>
      </plugin>

<!--
Disable testing in the Maven Surefire plugin, since we're using the Maven
ScalaTest plugin to do the testing.

NOTE: When the Maven ScalaTest plugin is better integrated into Maven, Surefire
will invoke ScalaTest test suites and this configuration will need to be
removed.
-->

      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire-plugin.version}</version>
        <configuration>
          <skipTests>true</skipTests>
        </configuration>
      </plugin>

<!--
Configure the Maven ScalaTest plugin.

NOTE: When the Maven ScalaTest plugin is better integrated into Maven, this
configuration may require modification.
-->

      <plugin>
        <groupId>org.scalatest</groupId>
        <artifactId>scalatest-maven-plugin</artifactId>
        <version>${scalatest-maven-plugin.version}</version>
        <configuration>
          <stdout>W</stdout>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

<!--
Check that the sources conform to the published coding standards.
-->

      <!-- plugin>
        <groupId>org.scalastyle</groupId>
        <artifactId>scalastyle-maven-plugin</artifactId>
        <version>${scalastyle-maven-plugin.version}</version>
        <configuration>
          <verbose>false</verbose>
          <failOnViolation>true</failOnViolation>
          <includeTestSourceDirectory>true</includeTestSourceDirectory>
          <failOnWarning>true</failOnWarning>
          <sourceDirectory>${basedir}/src/main/scala</sourceDirectory>
          <testSourceDirectory>${basedir}/src/test/scala</testSourceDirectory>
          <configLocation>
            ${basedir}/src/style/FacsimileStyle.xml
          </configLocation>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin -->

<!--
Plug-in to configure the library's jar file.

This plug-in defines standard manifest information (such as name, organization,
version, etc.).

Setting the addDefaultImplementationEntries field to true sets the jar manifest
entries below; this information can be retrieved via the java.lang.Package
object for this jar.

  Implementation-Title: ${project.name}
  Implementation-Version: ${project.version}
  Implementation-Vendor-Id: ${project.groupId}
  Implementation-Vendor: ${project.organization.name}

Setting the addDefaultSpecificationEntries field to true sets the jar manifest
entries below; this information can be retrieved via the java.lang.Package
object for this jar.

  Specification-Title: ${project.name}
  Specification-Version: ${project.version}
  Specification-Vendor: ${project.organization.name}

Note: This is used in preference to the maven-assemnly-plugin, since it
operates on the primary jar file, rather than a secondary one.
-->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${maven-jar-plugin.version}</version>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <addDefaultImplementationEntries>
                true
              </addDefaultImplementationEntries>
              <addDefaultSpecificationEntries>
                true
              </addDefaultSpecificationEntries>
              <classpathPrefix>lib/</classpathPrefix>
              <packageName>org.facsim.anim.cell</packageName>
              <mainClass>
                org.facsim.anim.cell.Main
              </mainClass>
            </manifest>

<!--
Keys for custom manifest entries defined here must also be added to the
org.facsim.util.ManifestField enumerator, and also included in the information
returned by org.facsim.util.Manifest.
-->

            <manifestEntries>
              <Build-Timestamp>${contacts.timestamp}</Build-Timestamp>
            </manifestEntries>
          </archive>
        </configuration>
        <executions>
          <execution>
            <id>jar</id>
            <phase>package</phase>
            <goals>
              <goal>jar</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

<!--
Plug-in to copy project dependencies to the output directory for packaging and
distribution.
-->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>${maven-dependency-plugin.version}</version>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
            <configuration>
              <excludeArtifactIds>
                scalatest_${scalatest.scala.version}
              </excludeArtifactIds>
              <outputDirectory>${project.build.directory}/lib</outputDirectory>
              <overWriteReleases>false</overWriteReleases>
              <overWriteSnapshots>false</overWriteSnapshots>
              <overWriteIfNewer>true</overWriteIfNewer>
            </configuration>
          </execution>
        </executions>
      </plugin>

<!--
Plug-in to measure how much of the code base is tested by the test-suite, using
the Cobertura tool.

The goal is 100% line and branch coverage, but that is difficult to achieve in
practice.  As coverage rates improve, the targets should be rates.
-->

      <!-- plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>cobertura-maven-plugin</artifactId>
        <version>${maven-cobertura-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>clean</goal>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <check>
            <haltOnFailure>true</haltOnFailure>
            <branchRate>85</branchRate>
            <lineRate>85</lineRate>
            <totalBranchRate>85</totalBranchRate>
            <totalLineRate>85</totalLineRate>
            <packageBranchRate>85</packageBranchRate>
            <packageLineRate>85</packageLineRate>
          </check>
        </configuration>
      </plugin -->

<!--
Plug-in to transfer resource bundles to the output directory, and test
resources to the test output directory.
-->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-resources-plugin</artifactId>
        <version>${maven-resources-plugin.version}</version>
      </plugin>

<!--
Plug-in to handle automated version numbering and release tagging.

These options are typically invoked by the Jenkins continuous integration
server.
-->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <!-- version>${maven-release-plugin.version}</version -->
        <configuration>

<!--
Release goals.
-->

          <goals>deploy</goals>

<!--
Change the source-code management comment prefix.
-->

          <scmCommentPrefix>Release robot: </scmCommentPrefix>

<!--
Do not use properties in the tagBase tag's definition - they will get trashed
by the maven-release-plugin during a release.
-->

          <!-- tagBase>
            https://contacts.svn.sourceforge.net/svnroot/contacts/tags
          </tagBase -->

<!--
Add source and documentation JARS to the distribution.

This also has the side-effect of not enabling the release-profile profile
-->

          <useReleaseProfile>true</useReleaseProfile>
        </configuration>
      </plugin>
    </plugins>
  </build>

<!--
===============================================================================
Profiles.

Two versions of the library can be built by this POM file:

development
    This version disables all optimization, enables all debug, assertions,
    assumptions, etc.  It is active by default and is intended for use during
    development and testing.  Development builds are available for use as
    SNAPSHOTS, although they are not recommended for production use.  This
    profile must be activated from the command line.

production
    This version enables maximum optimization, disables all debug, assertions,
    assumptions, etc. and ensures that the resulting library executes with
    maximum performance.  It is inactive by default and is intended for use
    when making a release only.  This profile must be activated from the
    command line.

Both versions are unit-tested by the test suite.
===============================================================================
-->

  <profiles>

<!--
Development build profile.

Disable all code optimization and enable as much debug support as possible.
Although this will result in a slower version of the library (relative to
the production build), it is intended to support the identification and fixing
of bugs during development of the library.

This profile should be active by default.
-->

    <profile>
      <id>development</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.scala-tools</groupId>
            <artifactId>maven-scala-plugin</artifactId>
            <version>${maven-scala-plugin.version}</version>
            <inherited>true</inherited>
            <configuration>
              <args>
                <arg>-deprecation</arg>
                <arg>-encoding</arg>
                <arg>${project.build.sourceEncoding}</arg>
                <arg>-explaintypes</arg>
                <arg>-g:vars</arg>
                <arg>-target:jvm-1.5</arg>
                <arg>-unchecked</arg>
                <arg>-Xcheckinit</arg>
                <!-- arg>-Xcheck-null</arg -->
                <arg>-Xfatal-warnings</arg>
                <arg>-Xlint</arg>
                <arg>-Ynotnull</arg>
                <arg>-Ywarn-all</arg>
              </args>
              <jvmArgs>
                <jvmArg>-Xms64m</jvmArg>
                <jvmArg>-Xmx1024m</jvmArg>
              </jvmArgs>
            </configuration>
          </plugin>
        </plugins>
      </build>
      <properties>
        <target.path>target/development</target.path>
      </properties>
    </profile>

<!--
Production build profile.

Enable maximum code optimization and disable as much debug support as possible.
This profile is used to generate production (i.e. release quality) versions of
the library.

This profile should be inactive except when performing a release.
-->

    <profile>
      <id>production</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.scala-tools</groupId>
            <artifactId>maven-scala-plugin</artifactId>
            <version>${maven-scala-plugin.version}</version>
            <inherited>true</inherited>
            <configuration>
              <args>
                <arg>-deprecation</arg>
                <arg>-encoding</arg>
                <arg>${project.build.sourceEncoding}</arg>
                <arg>-explaintypes</arg>
                <arg>-g:none</arg>
                <arg>-optimise</arg>
                <arg>-target:jvm-1.5</arg>
                <arg>-unchecked</arg>
                <arg>-Xcheckinit</arg>
                <!-- arg>-Xcheck-null</arg -->
                <arg>-Xdisable-assertions</arg>
                <arg>-Xfatal-warnings</arg>
                <arg>-Xlint</arg>
                <arg>-Ynotnull</arg>
                <arg>-Ywarn-all</arg>
              </args>
              <jvmArgs>
                <jvmArg>-Xms64m</jvmArg>
                <jvmArg>-Xmx1024m</jvmArg>
              </jvmArgs>
            </configuration>
          </plugin>
        </plugins>
      </build>
      <properties>
        <target.path>target/production</target.path>
      </properties>
    </profile>
  </profiles>
  
<!--
===============================================================================
Reporting configuration.
===============================================================================
-->

  <reporting>
    <plugins>

<!--
Generate project information reports.
-->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-project-info-reports-plugin</artifactId>
        <version>${maven-project-info-plugin.version}</version>
      </plugin>

<!--
Generate Cobertura test coverage reports.
-->

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>cobertura-maven-plugin</artifactId>
        <version>${maven-cobertura-plugin.version}</version>
      </plugin>

<!--
Generate FindBugs static code analysis reports.
-->

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>findbugs-maven-plugin</artifactId>
        <version>${maven-findbugs-plugin.version}</version>
      </plugin>

<!--
Scaladoc documentation generation.
-->

      <plugin>
        <groupId>org.scala-tools</groupId>
        <artifactId>maven-scala-plugin</artifactId>
        <version>${maven-scala-plugin.version}</version>
      </plugin>

<!--
Generate a source code formatting analysis to ensure that code conforms to the
coding standard.
-->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>${maven-checkstyle-plugin.version}</version>
      </plugin>
    </plugins>
  </reporting>
</project>
