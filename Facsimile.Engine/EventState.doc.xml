<?xml version="1.0" ?>
<!--
Facsimile -- A Discrete-Event Simulation Library
Copyright © 2004-2008, Michael J Allen.

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

The developers welcome all comments, suggestions and offers of assistance.
For further information, please visit the project home page at:

    http://www.facsim.org/

Thank you for your interest in the Facsimile project!

IMPORTANT NOTE: All patches (modifications to existing files and/or the
addition of new files) submitted for inclusion as part of the official
Facsimile code base, must comply with the published Facsimile Coding Standards.
If your code fails to comply with the standard, then your patches will be
rejected.  For further information, please visit the coding standards at:

    http://www.facsim.org/Documentation/CodingStandards/
===============================================================================
$Id$

XML source file for common documentation originating with the EventState
class, a member of the Facsimile.Engine namespace.
===============================================================================
-->

<!--
===============================================================================
Documentation, nominally belonging to virtual members of the EventState class,
that are common to EventState-implementing sub-classes.

Everything within the <member> declarations must conform to the C# standard
XML documentation comments.
===============================================================================
-->

<commonDoc>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Documentation for the EventState.TimeRemaing method.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <member name="EventState.TimeRemaining">

        <summary>Determine event's time remaining.</summary>

        <remarks>This method reports how much time remains, on the event's
        parent queue, before it is due to be dispatched.

        <para>Dispatched events should return 0.0.</para></remarks>

        <param name="eventParent">A <see cref="EventQueue" /> sub-class
        instance identifying the event's parent.</param>

        <param name="eventTime">A <see cref="Facsimile.Common.Measure
        {UnitType}" /> value, whose UnitType is a <see
        cref="Facsimile.Common.TimeUnit" /> instance, storing the event's
        miscellaneous time value.  The interpretation of this value is
        dependent upon the current state.</param>

        <returns>A <see cref="Facsimile.Common.Measure {UnitType}" /> value,
        whose UnitType is a <see cref="Facsimile.Common.TimeUnit" /> instance,
        indicating the time that remains before the event is
        dispatched.</value>

        <seealso "IEvent.TimeRemaining" />
    </member>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Documentation for the EventState.TimeDue method.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <member name="EventState.TimeDue">

        <summary>Determine event's due time.</summary>

        <remarks>This method reports the due time, relative to the event's
        parent queue, at which it is due to be dispatched.

        <para>Dispatched events should return their time of execution,
        suspended events should report an infinite time value.</para></remarks>

        <param name="eventParent">A <see cref="EventQueue" /> sub-class
        instance identifying the event's parent.</param>

        <param name="eventTime">A <see cref="Facsimile.Common.Measure
        {UnitType}" /> value, whose UnitType is a <see
        cref="Facsimile.Common.TimeUnit" /> instance, storing the event's
        miscellaneous time value.  The interpretation of this value is
        dependent upon the current state.</param>

        <value>A <see cref="Facsimile.Common.Measure {UnitType}" /> value,
        whose UnitType is <see cref="Facsimile.Common.TimeUnit" />, indicating
        the time at which the event will be dispatched.</value>

        <seealso "IEvent.TimeDue" />
    </member>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Documentation for the EventState.Suspend method.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <member name="EventState.Suspend">

        <summary>Increment event's suspend count.</summary>

        <remarks>This method increments the event's suspend count.  If the
        event is currently active, then this method should transition the
        associated event to suspended.  If the event is already suspended, then
        we should just increment the suspend count.  Other states do not
        support this operation and should throw an appropriate exception.

        <para>The default version of this method throws an exception; override
        this method to implement more appropriate state-specific
        behavior.</para></remarks>

        <param name="suspendCount">A <see cref="Facsimile.Common.Counter" />
        reference to the event's suspend count.</param>

        <returns>A <see cref="System.Boolean" /> that is true if the event has
        transitioned from active to suspended, or false if no transition has
        occurred.</returns>

        <exception cref="System.InvalidOperationException">Thrown if this state
        does not support suspension of the event.</exception>
    </member>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Documentation for the EventState.Resume method.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <member name="EventState.Resume">

        <summary>Decrement event's suspend count.</summary>

         <remarks>This method decrements the event's suspend count.  Unless the
        event is currently suspended, this method will merely throw an
        appropriate exception.  When the suspend count becomes zero, the event
        should transition back to the active state.

        <para>The default version of this method throws an exception; override
        this method to implement more appropriate state-specific
        behavior.</para></remarks>

        <param name="suspendCount">A <see cref="Facsimile.Common.Counter" />
        reference to the event's suspend count.</param>

        <returns>A <see cref="System.Boolean" /> that is true if the event has
        transitioned from suspended to active, or false if no transition has
        occurred.</returns>

        <exception cref="System.EventNotResumableException">Thrown if this
        state is not currently suspended.</exception>
    </member>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Documentation for the EventState.IsActive property.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <member name="EventState.IsActive">

        <summary>Associated event's active flag.</summary>

        <remarks>Reports whether the associated event, when in this state, is
        considered active; that is, if the associated event is currently
        scheduled in it's owning <see cref="EventQueue" />.

        <para>The default version of this property return false; override the
        property for states that represent active events.</para></remarks>

        <value>A <see cref="System.Boolean" /> that is true if the associated
        event is currently active, or false otherwise.</value>
    </member>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Documentation for the EventState.IsScheduled property.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <member name="EventState.IsScheduled">

        <summary>Associated event's suspended flag.</summary>

        <remarks>Reports whether the associated event, when in this state, is
        considered suspended; that is, if the associated event is currently
        suspended and not being considered for dispatch until one or more
        conditions are met.

        <para>The default version of this property return false; override the
        property for states that represent suspended events.</para></remarks>

        <value>A <see cref="System.Boolean" /> that is true if the associated
        event is currently suspended, or false otherwise.</value>
    </member>
</commonDoc>
