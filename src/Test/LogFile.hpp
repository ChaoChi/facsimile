/*
Facsimile -- A Discrete-Event Simulation Library
Copyright Â© 2004-2008, Michael J Allen.

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses.

The developers welcome all comments, suggestions and offers of assistance.
For further information, please visit the project home page at:

    http://www.facsim.org/

Thank you for your interest in the Facsimile project!

IMPORTANT NOTE: All patches (modifications to existing files and/or the
addition of new files) submitted for inclusion as part of the official
Facsimile code base, must comply with the published Facsimile Coding Standards.
If your code fails to comply with the standard, then your patches will be
rejected.  For further information, please visit the coding standards at:

    http://www.facsim.org/Documentation/CodingStandards/

$Id$
*/
//=============================================================================
/**
\file
Test suite LogFile class C++ header file.

C++ header file for the LogFile class that assists with log files generated by
the test suite.
*/
//=============================================================================

#ifndef TEST_LOGFILE_HPP_
#define TEST_LOGFILE_HPP_

/*
Relevant header files.
*/

#include <cassert>
#include <iostream>
#include <fstream>
#include <string>
#include <unicode/ustream.h>

//=============================================================================
/**
LogFile class.

Class representing a log file, to be used to store log messages and
miscellaneous output generated during the execution of the test suite.
*/
//=============================================================================

class LogFile:
    public std::ofstream
{

/**
Suffix to be appended to all log files generated.

This may be an empty string.  Otherwise, if must commence with a period (this
is supplied by the setSuffix() function).

\remarks The suffix does not affect the file type, which is always ".testlog".
*/

private:
    static std::string suffix;

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/**
Set the suffix for all log files subsequently created.

Changes the suffix to be appended to the names of all subsequently opened log
files.

\remarks The suffix does not affect the file type of any log files, which will
always be ".testlog".  Furthermore, the suffix follows any locale information
to be included in the file name.

\param newSuffix A nul-terminated string containing the new suffix.  If null,
then the suffix is set to an empty string; otherwise, the suffix is stored with
an initial period.
*/
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

public:
    static void setSuffix (const char* newSuffix) throw ();

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/**
File constructor.

Create a file with the required name, then open it for subsequent writing.

\remarks If the file already exists, it will be overwritten and its contents
replaced.

\param fileName A nul-terminated string containing the prefix of the file to be
created.  This cannot be null, and must include any relative path information
if required.

\param hasLocaleSpecificData If true, then the file is intended to include
locale-specifc data and should append the default locale (eg. ".en-US"), etc.
to the specified file name.  This argument defaults to true if not specified
explicitly.

\param isNewFile If true, then the file is opened and its contents are
truncated - any existing data in the file is erased.  If false, then the file
is opened and any new data is appended.  This argument defaults to false if not
specified explicitly.
*/
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

public:
    LogFile (const char* fileName, bool hasLocaleSpecificData = true, bool
    isNewFile = false) throw ();

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/**
Destructor.

Ensure data is flushed to the file and that the file is closed when instances
go out of scope.
*/
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

public:
    ~LogFile () throw ();
};
#endif /*TEST_LOGFILE_HPP_*/
