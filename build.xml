<?xml version="1.0" encoding="utf-8" ?>
<!--
Facsimile - A Discrete-Event Simulation Library
Copyright Â© 2004-2008, Michael J Allen.

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see <http://www.gnu.org/licenses/>.

The developers welcome all comments, suggestions and offers of assistance.
For further information, please visit the project home page at:

    http://www.facsim.org/

Thank you for your interest in the Facsimile project!

IMPORTANT NOTE: All patches (modifications to existing files and/or the
addition of new files) submitted for inclusion as part of the official
Facsimile code base, must comply with the published Facsimile Coding Standards.
If your code fails to comply with the standard, then your patches will be
rejected.  For further information, please visit the coding standards at:

    http://www.facsim.org/Documentation/CodingStandards/
===============================================================================
$Id$

Ant XML build file for Facsimile, its integral packages and test suite.

Ant is the official, preferred tool for building and testing Facsimile, and
this is the standard build file.  You may use Eclipse - or any other tools,
such as Microsoft Visual Studio - to build and test Facsimile on your own
machine, but you must also maintain this file so that it works with your
modifications.  While this file can be used to build and test Facsimile from
within Eclipse, it should not rely on any Eclipse Ant extensions; that is, it
should be possible to execute this file using a standalone version of Ant,
without needing to have Eclipse installed.

This file should work, out-of-the-box, for all users and should require no
modifications in order to work.  It is not a configuration file.  If you find
that it does not support your machine, or requirements, then raise a bug report
to that effect.  You should not need to make modifications to this file in
order for it to work on your system.  Modifications should only be made to
either fix bugs or to enable new features.

Note: DO NOT REPLACE THIS FILE WITH AUTOMATED ANT SCRIPTS GENERATED BY OTHER
TOOLS.  THIS FILE MUST BE MAINTAINED BY HAND.

Note that both debug and release versions of the Facsimile library are created
simultaneously.

The following properties, if defined on the Ant command line with the -D
option, change the way this script performs:

facsim.customBuild
    This property determines whether the word "Custom" appears in the name of
    the Facsimile library, to distinguish it from official releases of the
    library.

    THIS PROPERTY MUST BE DEFINED IF YOU ARE BUILDING A VERSION OF FACSIMILE
    THAT HAS MODIFIED SOURCES.  THIS INCLUDES DEVELOPMENT VERSIONS OF
    FACSIMILE.

facsim.rebuildAll
    This property determines whether the all libraries should be rebuilt from
    scratch.  If this property is defined, the source tree is first cleaned
    (with the "Clean" target) prior to any source compilation.
===============================================================================
-->

<project name="Facsimile" default="All" basedir=".">

<!--
Describe this build file briefly.
-->

    <description>
        Build file for the Facsimile discrete-event simulation library.
    </description>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_Init target.

This target outputs information to the log about the current build, and also
defines the external Ant tasks required for this build to succeed.

NOTE: IF ANY OF THESE TASKS ARE MISSING FROM YOUR SYSTEM, THEN YOU WILL NEED
TO INSTALL THEM; OTHERWISE, YOU WILL BE UNABLE TO BUILD THE FACSIMILE LIBRARY
OR ITS TEST SUITE.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="_Init" description="Ant initialization and setup.">

<!--
Provide information in the build log that may be relevant when supporting user
build problems.
-->

        <echo level="info">Facsimile build started...
${ant.version}
${java.runtime.name} ${java.runtime.version}
<!--Java class path: ${java.class.path}-->
Build file: ${ant.file}
User: ${user.name}
Operating System: ${os.name} ${os.version}</echo>

<!--
CppTasks.  These permit Ant to support C and C++ compilation tasks through the
<cc> task.

Refer to http://ant-contrib.sourceforge.net/cpptasks for further information.
-->

        <taskdef resource="cpptasks.tasks" />

<!--
Ant-Contrib tasks.  These permit Ant to support <if>, etc. and other useful
tasks (no idea why Ant doesn't provide them out of the box...).
-->

        <taskdef resource="net/sf/antcontrib/antlib.xml" />
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_ProjectTree target.

This target defines where the various project files are located in the source
tree, where output files should be located, etc.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="_ProjectTree" depends="_Init"
    description="Sets up project tree properties.">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Setting up project tree properties...</echo>

<!--
Output directory for completed executables and dynamic link libraries (debug
and release versions).

Note: This directory - and all of its contents - will be removed when the
"Clean" target is built.

DO NOT ADD MANUALLY ADD FILES TO THIS DIRECTORY!
-->

        <property name="facsim.bin" location="bin" />

<!--
Output directory for completed shared object libraries and object libraries
(debug and release versions).

Note: This directory - and all of its contents - will be removed when the
"Clean" target is built.

DO NOT ADD MANUALLY ADD FILES TO THIS DIRECTORY!
-->

        <property name="facsim.lib" location="lib" />

<!--
Output directory for completed documentation.

Note: This directory - and all of its contents - will be removed when the
"Clean" target is built.

DO NOT ADD MANUALLY ADD FILES TO THIS DIRECTORY!
-->

        <property name="facsim.doc" location="doc" />

<!--
Output directory for test suite logs.

Output files required for regression testing should not be included within this
directory as they will be lost when the directory is cleaned.

Note: This directory - and all of its contents - will be removed when the
"Clean" target is built.

DO NOT ADD MANUALLY ADD FILES TO THIS DIRECTORY!
-->

        <property name="facsim.log" location="log" />

<!--
Facsimile resource source file directory.
-->

        <property name="facsim.rsc" location="src/Facsimile/Resources" />

<!--
Temporary directories to hold object files produced during the build process.
-->

        <property name="facsim.tmp" location="tmp" />
        <property name="facsim.tmp.debug" location="${facsim.tmp}/debug" />
        <property name="facsim.tmp.release" location="${facsim.tmp}/release" />
        <property name="facsim.tmp.rsc" location="${facsim.tmp}/rsc" />
        <property name="facsim.tmp.test" location="${facsim.tmp}/test" />
        <property name="facsim.tmp.tool" location="${facsim.tmp}/tools" />

<!--
Facsimile include file root directory.
-->

        <property name="facsim.include" location="include" />

<!--
Root source directory for the Facsimile libraries.

All C++ source files wth a ".cpp" file extension within this directory, or its
sub-directories, will be included in the compilation of the library.  To
prevent a source file from being compiled, rename it so that it does not end in
".cpp".
-->

        <property name="facsim.src" location="src/Facsimile" />

<!--
Root source directory for the Facsimile test-suite.

All C++ source files wth a ".cpp" file extension within this directory, or its
sub-directories, will be included in the compilation of the test-suite.  To
prevent a source file from being compiled, rename it so that it does not end in
".cpp".
-->

        <property name="facsim.test.src" location="src/Test" />

<!--
Test data directory for the Facsimile test-suite.

All test suite log files, wth a ".log" file extension, within this directory,
or its sub-directories, will be used to verify test-suite output.  These files
are used to regression test fresh test-suite output logs against previously
known good test suite output logs.
-->

        <property name="facsim.test.data" location="testdata" />

<!--
We're done.
-->

        <echo level="info">Done setting project tree properties.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_ProjectVersion target.

This ttarget defines version properties for use when building the Facsimile
library.

THESE VALUES CAN ONLY BE MODIFIED BY THE OFFICIAL FACSIMILE RELEASE TEAM.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="_ProjectVersion" depends="_Init"
    description="Define project version information.">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Setting up version information...</echo>

<!--
Major version number.

This number shall be 0 until the first feature-complete version of Facsimile is
released.  The first feature-complete version of Facsimile shall be have the
major version number 1.  Subsequently, this number will be incremented whenever
a Facsimile release containing one or more major new features, compared to any
prior release, is issued.

The determination of what constitutes a "major new feature" will be decided by
the official Facsimile release team.  Features that do not qualify as major new
features are deemed minor new features.

Whenever this number is incremented, the minor and release numbers must be
reset to 0.
-->

        <property name="facsim.major" value="0" />

<!--
Minor version number.

This number shall be 0 for the first release.  Subsequently, this number will
be incremented whenever a Facsimile release containing zero major new features
and one or more minor new features, compared to any prior release, is issued.
It is reset to zero whenever a Facsimile release containing one or more major
new features, compared to any prior release, is issued.

The determination of what constitutes a "major new feature" will be decided by
the official Facsimile release team.  Features that do not qualify as major new
features are deemed minor new features.

Whenever this number is incremented, the release numbers must be reset to 0.
-->

        <property name="facsim.minor" value="0" />

<!--
Release number.

This number shall be 0 for the first release.  Subsequently, this number will
be incremented whenever a Facsimile release containing zero major new features
and zero minor new features, compared to any prior release, is issued.  It is
reset to zero whenever a Facsimile release containing one or more major new
features or one or more minor new features, compared to any prior release, is
issued.

In effect, the release number is incremented to indicate that a release
contains bug fixes only, and no change in features offered.
-->

        <property name="facsim.release" value="0" />

<!--
Full version property.

This property contains the full version string.
-->

        <property name="facsim.version"
        value="${facsim.major}.${facsim.minor}.${facsim.release}" />

<!--
We're done.
-->

        <echo level="info">Done setting up version information.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_DoClean target.

This target is responsible for actually cleaning the directory tree.

Note: This depends upon the _ProjectTree target having been executed, but if we
put that in as a dependency here, then _ProjectTree will be invoked a second
time.  Instead, this target should be invoked via the <antcall> task, from
targets that depend upon _ProjectTree.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="_DoClean" description="Clean source tree.">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Performing source tree cleaning...</echo>

<!--
Delete all output directories, if they exist.
-->

        <delete dir="${facsim.tmp}" verbose="true" />
        <delete dir="${facsim.bin}" verbose="true" />
        <delete dir="${facsim.lib}" verbose="true" />
        <delete dir="${facsim.doc}" verbose="true" />
        <delete dir="${facsim.log}" verbose="true" />

<!--
We're done.
-->

        <echo level="info">Done performing source tree cleaning.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_VerifyHostSystem target.

This target verifies that the set of environmental conditions upon which
building of the Facsimile library depends, hold.  These conditions include
support for the host operating system, the presence of third-party libraries
that are used by the Facsimile library, the presence of a suitable compiler,
etc.

The objective here is to keep the user fully informed about his system and its
suitability for building the Facsimile library from its sources.  If any
deficiencies are found, then the user should be informed what to do about them.

For example, if the user does not have a suitable C++ compiler, then this
target explain that this is the case and give the user some ideas how they can
get around the problem.  This is viewed as being preferable to Ant generating
error messages of an arcane nature.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="_VerifyHostSystem" depends="_ProjectTree, _ProjectVersion"
    description="Verify host system.">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Verifying host system can build Facsimile...</echo>

<!--
Verify that the user's operating system is supported.

Currently, Facsimile is supported on Windows NT, Windows 2000, Windows XP,
Windows Vista, Linux, FreeBSD, NetBSD, OpenBSD and MacOSX - provided that all
other conditions also apply.
-->

        <fail>
            <condition>
                <not>
                    <or>
                        <os family="winnt" />
                        <os family="unix" />
                    </or>
                </not>
            </condition>
Facsimile is not supported on your operating system.

Facsimile is supported on the following only:
    Windows (NT, 2000, XP, Vista)
    Linux
    BSD (FreeBSD, NetBSD, OpenBSD)
    Mac OS X
        </fail>

<!--
Verify that the user has a suitable C++ compiler.

If this condition fails, then we should inform the user that a suitable
compiler be installed.
-->

        <!-- TODO -->

<!--
Verify that the user has the relevant Boost C++ libraries installed.  To do
this, we check for the presence of specific header files in the default include
file path.

If this condition fails, then the user must install the missing libraries.
-->

        <!-- TODO -->

<!--
Verify that the user has installed the International Components for Unicode
(ICU) libraries.  To do this, we check for the presence of specific header
files in the default include file path.
-->

        <!-- TODO -->

<!--
Verify that the user has installed the CppUnit C++ unit-testing library.
-->

        <!-- TODO -->

<!--
We're done.
-->

        <echo level="info">Done verifying host system.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_ConfigureHostSystem target.

This target configures the host system to build and test Facsimile according to
the nature of the host system.

Currently, this script assumes the use of the GNU C++ compiler on all
platforms.  (This may be modified in time, but right now, that's where we'are
at.)

On Linux, BSD, Unix and MacOS systems, the facimile library is named:

    libFacsimile[C].so.M.m.r        (optimized version, shared object library)
    libFacsimile[C]Debug.so.M.m.r   (debug version, shared object library)

On Windows systems, the facsimile library is named:

    Facsimile[C]-M.m.r.dll          (optimized version, dynamic link library)
    Facsimile[C]-M.m.r.lib          (optimized version, object library)
    Facsimile[C]Debug-M.m.r.dll     (debug version, dynamic link library)
    Facsimile[C]Debug-M.m.r.lib     (debug version, object library)

Note that a "shared object library" on Linux/BSD/UNIX/MacOS platforms has the
same functionality as both the "object library" and the "dynamic link library"
on Windows platforms.

In all of these names, "C" is replaced by the word "Custom" if the library is
being built by anyone other than the official release team, "M" is replaced by
the major version number, "m" by the minor version number and "r" by the
release number.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="_ConfigureHostSystem" depends="_VerifyHostSystem"
    description="Configure host system.">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Configuring host system to build Facsimile...</echo>

<!--
Output directory for completed shared object libraries (debug and release
versions).

This directory will be the same as ${facsim.lib} if this is a
Linux/BSD/Unix/MacOS system, or the same as ${facsim.bin} if this is a Windows
system.
-->

        <condition property="facsim.binLib" value="${facsim.bin}"
        else="${facsim.lib}">
            <os family="winnt" />
        </condition>

<!--
Determine the prefix to be used with the library names.  This will be "" for
Windows libraries and "lib" for Linux/BSD/Unix/MacOS libraries.
-->

        <condition property="facsim.prefix" value="" else="lib">
            <os family="winnt" />
        </condition>

<!--
Determine the suffix employed by dynamic libraries.  This will be "-M.m.r.dll"
for Windows dynamic link libraries and ".so.M.m.r" for Linux/BSD/Unix/MacOS
shared object libraries (where "M.m.r" is the version number).
-->

        <condition property="facsim.dynSuffix" value="-${facsim.version}.dll"
        else=".so.${facsim.version}">
            <os family="winnt" />
        </condition>

<!--
Determine the suffix employed by static libraries used during the link phase.
This will be "-M.m.r.lib" for Windows object libraries and ".so.M.m.r" for
Linux/BSD/Unix/MacOS shared object libraries (where "M.m.r" is the version
number).
-->

        <condition property="facsim.staSuffix" value="-${facsim.version}.lib"
        else=".so.${facsim.version}">
            <os family="winnt" />
        </condition>

<!--
Determine the suffix employed by executables.  This will be ".exe" for Windows
executables and "" for Linux/BSD/Unix/MacOS executables.
-->

        <condition property="facsim.exeSuffix" value=".exe" else="">
            <os family="winnt" />
        </condition>

<!--
Determine the "custom" tag of the file name.  This should be "Custom" if this
is a custom build, or "" if this is an official or unmodified build.
-->

        <condition property="facsim.custom" value="Custom" else="">
            <isset property="facsim.customBuild" />
        </condition>

<!--
Configure the root name of the Facsimile library.
-->

        <property name="facsim.name" value="Facsimile" />

<!--
Configure the root name of the Facsimile resource library.
-->

        <property name="facsim.rsc.name" value="${facsim.name}Resources" />

<!--
Configure the main name of the resource library.  This comprises the resource
library's root name with the custom tag (defined above) appended.
-->

        <property name="facsim.rsc.mainName"
        value="${facsim.rsc.name}${facsim.custom}" />

<!--
Determine the name of the Facsimile resource dynamic library.  This will be the
same for both the Release and Debug versions of the Facsimile library.
-->

        <property name="facsim.rsc.dynLib"
        value="${facsim.prefix}${facsim.rsc.mainName}${facsim.dynSuffix}" />

<!--
Determine the name of the Facsimile resource static library.  This will be the
same for both the Release and Debug versions of the Facsimile library.

Note: On Linux/BSD/Unix/MacOS systems, this is the same as the dynamic library.
-->

        <property name="facsim.rsc.staLib"
        value="${facsim.prefix}${facsim.rsc.mainName}${facsim.staSuffix}" />

<!--
Configure the root name of the Facsimile release library.
-->

        <property name="facsim.rel.name" value="${facsim.name}" />

<!--
Configure the main name of the Facsimile release library.  This comprises the
release library's root name with the custom tag (defined above) appended.
-->

        <property name="facsim.rel.mainName"
        value="${facsim.rel.name}${facsim.custom}" />

<!--
Determine the full name of the Facsimile dynamic library, release version.
-->

        <property name="facsim.rel.dynLib"
        value="${facsim.prefix}${facsim.rel.mainName}${facsim.dynSuffix}" />

<!--
Determine the full name of the Facsimile static library, release version.

Note: On Linux/BSD/Unix/MacOS systems, this is the same as the dynamic library.
-->

        <property name="facsim.rel.staLib"
        value="${facsim.prefix}${facsim.rel.mainName}${facsim.staSuffix}" />

<!--
Configure the root name of the Facsimile debug library.
-->

        <property name="facsim.dbg.name" value="${facsim.name}Debug" />

<!--
Configure the main name of the Facsimile debug library.  This comprises the
debug library's root name with the custom tag (defined above) appended.
-->

        <property name="facsim.dbg.mainName"
        value="${facsim.dbg.name}${facsim.custom}" />

<!--
Determine the full name of the Facsimile dynamic library, debug version.
-->

        <property name="facsim.dbg.dynLib"
        value="${facsim.prefix}${facsim.dbg.mainName}${facsim.dynSuffix}" />

<!--
Determine the full name of the Facsimile static library, debug version.

Note: On Linux/BSD/Unix/MacOS systems, this is the same as the dynamic library.
-->

        <property name="facsim.dbg.staLib"
        value="${facsim.prefix}${facsim.dbg.mainName}${facsim.staSuffix}" />

<!--
Facsimile test suite prefix.
-->

        <property name="facsim.test.prefix" value="Test" />

<!--
Facsimile library debug test suite executable.
-->

        <property name="facsim.test.dbgExe"
        value="${facsim.test.prefix}${facsim.dbg.mainName}${facsim.exeSuffix}"
        />

<!--
Facsimile library release test suite executable.
-->

        <property name="facsim.test.relExe"
        value="${facsim.test.prefix}${facsim.rel.mainName}${facsim.exeSuffix}"
        />

<!--
Facsimile copyright and description, for use as appropriate.
-->

        <property name="facsim.copyright"
        value="Copyright Â© 2004-2008, Michael J Allen." />
        <property name="facsim.description"
        value="Facsimile simulation/emulation library." />

<!--
We're done.
-->

        <echo level="info">Done configuring host system.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_Rebuild target.

This target forces a rebuild of all affected targets by first cleaning the
source tree.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="_Rebuild" if="facsim.rebuildAll" depends="_ProjectTree"
    description="Conditionally forces rebuild of targets by cleaning tree.">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Performing rebuild...</echo>

<!--
Have the _DoClean target perform the hard work.
-->

        <antcall target="_DoClean" inheritAll="true" inheritRefs="true" />

<!--
We're done.
-->

        <echo level="info">Done rebuilding.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_CreateTmpDir target.

This target creates the temporary directories for all temporary and/or
intermediate files created during the build process; it is a pre-requisite for
certain other targets.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="_CreateTmpDir" depends="_Rebuild"
    description="Create ./tmp output directories">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Checking for ./tmp output directory...</echo>

<!--
Create the directories if neeeded.
-->

        <mkdir dir="${facsim.tmp}" />
        <mkdir dir="${facsim.tmp.debug}" />
        <mkdir dir="${facsim.tmp.release}" />
        <mkdir dir="${facsim.tmp.rsc}" />
        <mkdir dir="${facsim.tmp.test}" />
        <mkdir dir="${facsim.tmp.tool}" />

<!--
We're done.
-->

        <echo level="info">Done checking for ./tmp output directory</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_CreateBinDir target.

This target creates the output directory for all generated dynamic link
libraries and executables; it is a pre-requisite for certain other targets.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="_CreateBinDir" depends="_Rebuild"
    description="Create ./bin output directory">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Checking for ./bin output directory...</echo>

<!--
Create the directory if neeeded.
-->

        <mkdir dir="${facsim.bin}" />

<!--
We're done.
-->

        <echo level="info">Done checking for ./bin output directory</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_CreateLibDir target.

This target creates the output directory for all generated shared object
libraries and object libraries; it is a pre-requisite for certain other
targets.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="_CreateLibDir" depends="_Rebuild"
    description="Create ./lib output directory">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Checking for ./lib output directory...</echo>

<!--
Create the directory if neeeded.
-->

        <mkdir dir="${facsim.lib}" />

<!--
We're done.
-->

        <echo level="info">Done checking for ./lib output directory</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_CreateDocDir target.

This target creates the output directory for all generated documentation; it is
a pre-requisite for documentation generation targets.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="_CreateDocDir" depends="_Rebuild"
    description="Create ./doc output directory">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Checking for ./doc output directory...</echo>

<!--
Create the directory if neeeded.
-->

        <mkdir dir="${facsim.doc}" />

<!--
We're done.
-->

        <echo level="info">Done checking for ./doc output directory</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_CreateLogDir target.

This target creates the output directory for all generated test-suite log
messages and discardable output; it is a pre-requisite for test suite execution
targets.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="_CreateLogDir" depends="_Rebuild"
    description="Create ./log directory">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Checking for ./log output directory...</echo>

<!--
Create the directory if neeeded.
-->

        <mkdir dir="${facsim.log}" />

<!--
We're done.
-->

        <echo level="info">Done checking for ./log output directory</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
_CheckBuildResources target.

Determines whether we need to re-build the resource library by comparing the
timestamp of the library with those of the resource source files.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="_CheckBuildResources"
    description="Check whether resources need to be rebuilt."
    depends="_ConfigureHostSystem">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Checking if resource re-build needed...</echo>

<!--
Create a list of all Facsimile library ICU resource source files.
-->

        <fileset id="facsim.rsc.sources" dir="${facsim.rsc}" >
            <include name="**/*.icu" />
        </fileset>

<!--
Now check whether the resource library file is more up-to-date than the
sources.  If it is, then we do not need to rebuild the resource library.

Note: On Linux/BSD/Unix/MacOS, we are basically including the same library file
twice as a target file.  This shouldn't affect the logic, as only the
time-stamps of the files will be examined.  This is necessary because Windows
uses both a dynamic link library (used when the application executes) and a
static library (used when the application is built).
-->

        <uptodate property="facsim.resourcesUpToDate">
            <srcfiles refid="facsim.rsc.sources" />
            <mapper>   
                <mapper type="merge" to="${facsim.binLib}/${facsim.rsc.dynLib}"
                />
                <mapper type="merge" to="${facsim.lib}/${facsim.rsc.staLib}" />
            </mapper>
        </uptodate>

<!--
We're done.
-->

        <echo level="info">Done checking resource rebuild.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Clean target.

This target removes all files created by the build process, including
executables, libraries, test-suite logs, auto-generated documentation, etc.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="Clean" depends="_ProjectTree"
    description="Clean source tree.">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Cleaning source tree...</echo>

<!--
Have the _DoClean target perform the hard work.
-->

        <antcall target="_DoClean" inheritAll="true" inheritRefs="true" />

<!--
We're done.
-->

        <echo level="info">Done cleaning source tree.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BuildResources target.

This target builds the International Components for Unicode (ICU) resources
referenced by the Facsimile library; the resources are linked as a dynamic link
library.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="BuildResources" description="Build Facsimile resources."
    depends="_CheckBuildResources, _CreateTmpDir, _CreateLibDir, _CreateBinDir"
    unless="facsim.resourcesUpToDate">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Building Facsimile resources...</echo>

<!--
Firstly, we must compile each source file using the ICU "gebnrb" utility.  The
parallel="false" setting ensures that each file is compiled separately, rather
than all files being passed to the command at the same time.
-->

        <apply taskname="genrb" executable="genrb" logerror="true"
        failonerror="true" parallel="false">

<!--
Configuration options.  See the pkgdata command help for further information.
-->

            <arg value="--destdir" />
            <arg value="${facsim.tmp.rsc}" />
            <arg value="--sourcedir" />
            <arg value="${facsim.rsc}" />
            <arg value="--encoding" />
            <arg value="UTF-8" />

<!--
Finally, here're the names of the resources files.  The apply command processes
them one-at-a-time, rather than dumping them all to the command at one go.
-->

            <fileset refid="facsim.rsc.sources" />
        </apply>

<!--
OK.  Create a fileset for these generated resources.
-->

        <fileset id="facsim.rsc.resources" dir="${facsim.tmp.rsc}">
            <include name="**/*.res" />
        </fileset>

<!--
Define the name of the file containing the list of resources.  This filename
should not include version information.
-->

        <property name="facsim.rsc.sourceListFile"
        location="${facsim.tmp.rsc}/${facsim.rsc.name}.txt" />

<!--
If this file already exists, then delete it.
-->

        <delete file="${facsim.rsc.sourceListFile}" />

<!--
Now write the list of resource files into this list file.  The apply command is
used to append the name of each file to the list file, one at a time
(parallel="false").
-->

        <apply taskname="listResources" executable="echo" logerror="true"
        failonerror="true" output="${facsim.rsc.sourceListFile}" append="true"
        parallel="false" relative="true">
            <fileset refid="facsim.rsc.resources" />
        </apply>

<!--
Now compile these resources into a dynamic library that can be referenced by
the Facsimile library at run-time.
-->

        <apply taskname="pkgdata" executable="pkgdata" logerror="true"
        failonerror="true" parallel="false">

<!--
Configuration options.  See the pkgdata command help for further information.
-->

            <arg value="--mode" />
            <arg value="library" />
            <arg value="--name" />
            <arg value="FacsimileResources" />
            <arg value="--revision" />
            <arg value="${facsim.version}" />
            <arg value="--destdir" />
            <arg value="${facsim.lib}" />
            <arg value="--sourcedir" />
            <arg value="${facsim.tmp.rsc}" />
            <arg value="--tempdir" />
            <arg value="${facsim.tmp.rsc}" />
            <arg value="--verbose" />
            <arg value="--comment" />
            <arg value="${facsim.copyright}" />

<!--
Finally, here's the name of the file containing the names of all the resource
files.
-->

            <fileset file="${facsim.rsc.sourceListFile}" />
        </apply>

<!--
We're done.
-->

        <echo level="info">Done building Facsimile resources.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BuildFacsimile target.

This target builds the entire Facsimile library, both Debug and Release
versions.

Facsimile employs a number of third-party libraries that are GPL-compatible.
These libraries are as follows:

gc  Boehm-Demers-Weiser conservative garbage collection library.  This library
    provides automated garbage collection facilities to Facsimile.
icuio
    International Components for Unicode (ICU), input/output library.  This
    library provides I/O facilities for ICU features (including operator << and
    operator >>).
icui18n
    International Components for Unicode (ICU), internationalization library.
    This library defines locale characteristics for many different locales.
icuuc
    International Components for Unicode (ICU), common library.  This library
    defines the icu::Locale, icu::UnicodeString and icu::ResourceBundle
    classes.
boost_signals-mt
    The Boost C++ Signals library.  This library implements the slots and
    signals processing features of Facsimile.
boost_thread-mt
    The Boost C++ Thread library.  This libraray implement the thread handling
    features of Facsimile.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="BuildFacsimile" description="Build Facsimile libraries."
    depends="BuildResources">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Building Facsimile libraries...</echo>

<!--
Create a list of all Facsimile library source files.
-->

        <fileset id="facsim.sources" dir="${facsim.src}" >
            <include name="**/*.cpp" />
        </fileset>

<!--
Produce the debug form of the library first.  This version includes debug
information and has no optimizations within the code.
-->

        <echo level="info">Building Facsimile debug library...</echo>
        <cc outfile="${facsim.binLib}/${facsim.dbg.mainName}" outtype="shared"
        exceptions="true" rtti="true" runtime="dynamic" warnings="aserror"
        objdir="${facsim.tmp.debug}" debug="true" optimize="none"
        multithreaded="true">
            <includepath location="${facsim.include}" />
            <libset dir="${facsim.lib}" libs="${facsim.rsc.mainName}" />
            <libset libs="gc,icuuc,icuio,boost_signals-mt,boost_thread-mt" />
            <fileset refid="facsim.sources" />
        </cc>

<!--
Now produce the release form of the library.  This version excludes debug
information but has optimizations within the code.
-->

        <echo level="info">Building Facsimile release library...</echo>
        <cc outfile="${facsim.binLib}/${facsim.rel.mainName}" outtype="shared"
        exceptions="true" rtti="true" runtime="dynamic" warnings="aserror"
        objdir="${facsim.tmp.release}" debug="false" optimize="speed"
        multithreaded="true">
            <compilerarg location="mid" value="-DNDEBUG" />
            <includepath location="${facsim.include}" />
            <libset dir="${facsim.lib}" libs="${facsim.rsc.mainName}" />
            <libset libs="gc,icuuc,icuio,boost_signals-mt,boost_thread-mt" />
            <fileset refid="facsim.sources" />
        </cc>

<!--
We're done.
-->

        <echo level="info">Done building Facsimile libraries.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
TestFacsimile target.

This target tests the entire Facsimile library, both Debug and Release
versions, to ensure that it is functioning correctly.

Facsimile employs the CppUnit C++ unit-testing framework.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="TestFacsimile" description="Test Facsimile libraries."
    depends="_CreateLogDir, BuildFacsimile">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Testing Facsimile libraries...</echo>

<!--
Create a list of all Facsimile test suite source files.
-->

        <fileset id="facsim.test.sources" dir="${facsim.test.src}" >
            <include name="**/*.cpp" />
        </fileset>

<!--
Produce the test suite for the debug library first.  This links to the debug
version of the Facsimile library.

Note: The test suite itself is compiled with debug information, and without any
optimizations, to assist with debugging of both the test suite and Facsimile.
Indeed, we should need to compile the test suite once only, as the resulting
code is the same for both versions of the test suite.
-->

        <echo level="info">Building Facsimile debug library tests...</echo>
        <cc outfile="${facsim.bin}/${facsim.test.dbgExe}" outtype="executable"
        exceptions="true" rtti="true" subsystem="console" warnings="aserror"
        objdir="${facsim.tmp.test}" debug="true" optimize="none"
        multithreaded="true">
            <includepath location="${facsim.include}" />
            <libset dir="${facsim.lib}"
            libs="${facsim.rsc.mainName},${facsim.dbg.mainName}" />
            <libset libs="cppunit,icuuc,icuio,boost_signals-mt,boost_thread-mt"
            />
            <fileset refid="facsim.test.sources" />
        </cc>

<!--
Now test the debug version.
-->

        <echo level="info">Testing Facsimile debug library...</echo>
        <echo level="info">Disregard messages stating:</echo>
        <echo level="info">  GC Warning: Out of Memory!  Returning NIL!</echo>
        <exec taskname="TestDebug"
        executable="${facsim.bin}/${facsim.test.dbgExe}" logerror="true"
        failonerror="true">
            <env key="LD_LIBRARY_PATH" value="${facsim.binLib}" />
            <arg value="Debug" />
        </exec>

<!--
Now for the test suite for the release library.  This links to the release
version of the Facsimile library.

Note: The test suite itself is compiled with debug information, and without any
optimizations, to assist with debugging of both the test suite and Facsimile.
Indeed, we should need to compile the test suite once only, as the resulting
code is the same for both versions of the test suite.
-->

        <echo level="info">Building Facsimile release library tests...</echo>
        <cc outfile="${facsim.bin}/${facsim.test.relExe}" outtype="executable"
        exceptions="true" rtti="true" subsystem="console" warnings="aserror"
        objdir="${facsim.tmp.test}" debug="true" optimize="none"
        multithreaded="true">
            <includepath location="${facsim.include}" />
            <libset dir="${facsim.lib}"
            libs="${facsim.rsc.mainName},${facsim.rel.mainName}" />
            <libset libs="cppunit,icuuc,icuio,boost_signals-mt,boost_thread-mt"
            />
            <fileset refid="facsim.test.sources" />
        </cc>

<!--
Now test the release version.
-->

        <echo level="info">Testing Facsimile release library...</echo>
        <echo level="info">Disregard messages stating:</echo>
        <echo level="info">  GC Warning: Out of Memory!  Returning NIL!</echo>
        <exec taskname="TestRelease"
        executable="${facsim.bin}/${facsim.test.relExe}" logerror="true"
        failonerror="true">
            <env key="LD_LIBRARY_PATH" value="${facsim.binLib}" />
            <arg value="Release" />
        </exec>

<!--
We're done.
-->

        <echo level="info">Done testing Facsimile libraries.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
VerifyLogs target.

This target verifies Facsimile test suite log files.

The test suites creates a set of log files (int the ${facsim.log} directory)
during their execution.  We need to compare these logs with the stored copies
in the ${facsim.log.data} directory.  If a log file has changed (that is, if
the contents of a newly generated log differs from its stored version), then we
need to ask the user to verify the new version.  If they verify the file, then
we will replace the previous version with the new log; if they fail to verify
the file, then we will fail the build.

There will be both debug and release versions of the logs.  Furthermore, we may
also have different logs for each locale, so that we can ensure that each
supported locale has an appropriate set of messages.  (Note, however, that the
test suite will use the current default locale when it executes, so that the
full set of stored logs is not necessarily checked each time the test suite
runs - only those logs with a matching locale.  The automated testers will be
executed on each supported locale to ensure full test coverage.)

The primary purpose of this step is to ensure that any text output (such as
exception messages, etc.) is formatted correctly.

Automated testing cannot verify files and will automatically fail if any log
files differ.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="VerifyLogs"
    description="Verifying Facsimile test suite logs." depends="TestFacsimile">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Verifying Facsimile test suite logs...</echo>

<!--
Firstly, we need to create a list of all log files that differ from our stored
set.
-->

        <fileset id="facsim.log.files" dir="${facsim.log}" >
            <include name="**/*.log" />
            <different targetdir="${facsim.test.data}" ignoreFileTimes="true"
            />
        </fileset>

<!--
If the fileset contains any files, then set a flag indicating that some files
have changed.  We also inform the user which files changed so that they can be
reviewed.
-->

        <for param="logFile">
            <fileset refid="facsim.log.files" />
            <sequential>
                <echo>Log file @{logFile} changed since last good build</echo>
                <property name="facsim.log.filesModified" value="true" />
            </sequential>
        </for>

<!--
If any log files do differ from the stored versions, then ask the user to
manually verify them.  If the user chooses not to verify them (default), then
the build fails.

Note:  If the user is not sure, or doesn't have time to verify the differences,
then they should NOT approve the files.
-->

        <if>
            <isset property="facsim.log.filesModified" />
            <then>
                <input message="Verify these log files?" validargs="y,n"
                defaultValue="n" addproperty="facsim.log.verifyReply" />

<!--
If the user chose to verify these files, then copy them across to the store.
-->

                <if>
                    <equals arg1="${facsim.log.verifyReply}" arg2="y" />

<!--
Now copy all files that are different and that have been approved by the
developer executing these tests.
-->

                    <then>
                        <copy todir="${facsim.test.data}" overwrite="true">
                            <fileset refid="facsim.log.files" />
                        </copy>
                    </then>

<!--
Otherwise, the build must fail.
-->
                    <else>
                        <fail>Log file changes not verified.</fail>
                    </else>
                </if>
            </then>
        </if>

<!--
We're done.
-->

        <echo level="info">Done verifying Facsimile test suite logs.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DocumentFacsimile target.

This target generates the documentation for the entire Facsimile library.
Currently, only user documentation is generated.  Internal (developer)
documentation is currently not generated.

Facsimile employs the Doxygen (http://www.doxygen.org/) C++ documentation
generator.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="DocumentFacsimile"
    description="Document Facsimile libraries." depends="VerifyLogs">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Documenting Facsimile libraries...</echo>

<!--
Now run Doxygen to generate documentation from the sources.
-->

        <exec taskname="Doxygen" executable="doxygen" logerror="true"
        failonerror="true">
            <arg value="Doxyfile" />
        </exec>

<!--
We're done.
-->

        <echo level="info">Done documenting Facsimile libraries.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BuildTools target.

This target builds all tools associated Facsimile library.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="BuildTools"
    description="Builds Facsimile Tools." depends="TestFacsimile">

<!--
Log what we're doing to the output.
-->

        <echo level="info">Building Facsimile tools...</echo>

<!--
We're done.
-->

        <echo level="info">Done building Facsimile tools.</echo>
    </target>

<!--
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
All target.

This target builds integral packages and runs all test suites.  If this target
completes successfully, then we have a release-quality build.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-->

    <target name="All" description="Full build &amp; test"
    depends="DocumentFacsimile, BuildTools">

<!--
If everything has finished successfully, then increment the build number.  This
is stored within the build.number file.
-->

        <!-- <buildnumber /> -->
    </target>
</project>
